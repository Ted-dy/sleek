package me.kansio.client.modules.impl.exploit;

import com.google.common.eventbus.Subscribe;
import lombok.Getter;
import lombok.Setter;
import me.kansio.client.event.impl.MoveEvent;
import me.kansio.client.event.impl.PacketEvent;
import me.kansio.client.event.impl.UpdateEvent;
import me.kansio.client.modules.api.ModuleCategory;
import me.kansio.client.modules.api.ModuleData;
import me.kansio.client.modules.impl.Module;
import me.kansio.client.modules.impl.exploit.disabler.DisablerMode;
import me.kansio.client.value.value.BooleanValue;
import me.kansio.client.value.value.ModeValue;
import me.kansio.client.value.value.NumberValue;
import me.kansio.client.utils.java.ReflectUtils;
import me.kansio.client.utils.math.Stopwatch;

import javax.vecmath.Vector3d;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

@Getter
@ModuleData(
        name = "Disabler",
        category = ModuleCategory.EXPLOIT,
        description = "Disables anticheats"
)
public class Disabler extends Module {

    private final List<? extends DisablerMode> modes = ReflectUtils.getReflects(this.getClass().getPackage().getName() + ".disabler", DisablerMode.class).stream()
            .map(aClass -> {
                try {
                    return aClass.getDeclaredConstructor().newInstance();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                return null;
            })
            .sorted(Comparator.comparing(disablerMode -> disablerMode != null ? disablerMode.getName() : null))
            .collect(Collectors.toList());
    private final ModeValue mode = new ModeValue("Mode", this, modes.stream().map(DisablerMode::getName).collect(Collectors.toList()).toArray(new String[]{}));
    private DisablerMode currentMode = modes.stream().anyMatch(disablerMode -> disablerMode.getName().equalsIgnoreCase(mode.getValue())) ? modes.stream().filter(disablerMode -> disablerMode.getName().equalsIgnoreCase(mode.getValue())).findAny().get() : null;


    @Setter private Vector3d repeatPos = new Vector3d();
    private final Stopwatch stopwatch = new Stopwatch();

    //blocks delay
    private final NumberValue bmcDelay = new NumberValue("Delay", this, 350, 0, 1000, 1, mode, "BlocksMC");

    //Custom Shit
    private final BooleanValue cancelTransactions = new BooleanValue("Cancel Transactions", this, false, mode, "Custom");
    private final BooleanValue cancelKeepAlives = new BooleanValue("Cancel Keep Alive", this, false, mode, "Custom");
    private final BooleanValue delayTransactions = new BooleanValue("Delay Transactions", this, false, mode, "Custom");
    private final NumberValue delayTransAmount = new NumberValue("Transaction Delay", this, 1000, 0, 60000, 0.1, delayTransactions);
    private final BooleanValue delayKeepAlives = new BooleanValue("Delay Keep Alive", this, false, mode, "Custom");
    private final NumberValue delayKeepAliveAmount = new NumberValue("Delay Alive Amount", this, 1000, 0, 60000, 0.1, delayKeepAlives);
    private final BooleanValue sendC0C = new BooleanValue("Send C0C", this, false, mode, "Custom");
    private final BooleanValue maxc0c = new BooleanValue("Max Value C0C", this, false, mode, "Custom");
    private final BooleanValue voidTeleport = new BooleanValue("Void Teleport", this, false, mode, "Custom");
    private final NumberValue voidTpDelay = new NumberValue("TP Delay", this, 3000, 0, 60000, 1, voidTeleport);
    private final NumberValue voidTpAmount = new NumberValue("TP Amount", this, -999999999, 0, 6000000, 0.1, voidTeleport);
    private final BooleanValue spoofOnGround = new BooleanValue("Spoof Ground", this, false, mode, "Custom");
    private final BooleanValue offGround = new BooleanValue("No ground", this, false, mode, "Custom");
    private final BooleanValue spectateSpoof = new BooleanValue("Spectate Spoof", this, false, mode, "Custom");
    private final BooleanValue abilitiesSpoof = new BooleanValue("Abilities Spoof", this, false, mode, "Custom");
    private final BooleanValue timer = new BooleanValue("Timer", this, false, mode, "Custom");
    private final NumberValue timerSpeed = new NumberValue("Timer Speed", this, 1, 0.1, 10, 0.1, timer);
    public final BooleanValue autoDisable = new BooleanValue("Hub Disable", this, false, mode, "BlocksMC");


    private boolean expectedTeleport;


    @Override
    public void onEnable() {

        currentMode = modes.stream().anyMatch(disablerMode -> disablerMode.getName().equalsIgnoreCase(mode.getValue())) ? modes.stream().filter(disablerMode -> disablerMode.getName().equalsIgnoreCase(mode.getValue())).findAny().get() : null; // Its shouldn't be null
        if (currentMode != null)
            currentMode.onEnable();

    }

    @Subscribe
    public void onSendPacket(PacketEvent event) {
        if (currentMode == null) return;

        currentMode.onPacket(event);
    }

    @Subscribe
    public void onMove(MoveEvent event) {
        if (currentMode == null) return;

        currentMode.onMove(event);
    }


    @Subscribe
    public void onUpdate(UpdateEvent event) {
        if (currentMode == null) return;

        currentMode.onUpdate(event);
    }

    boolean shouldRun() {
        return mc.thePlayer != null && mc.thePlayer.ticksExisted > 5;
    }



    @Override
    public String getSuffix() {
        return " " + mode.getValueAsString();
    }
}
